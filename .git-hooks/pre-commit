#!/usr/bin/env bash

STAGED_FILES=""

WORKDIR="$(git rev-parse --show-toplevel)"
HOOKS_DIR="${WORKDIR}/$(git config core.hookspath)"
HOOKS_LOG_FILE="${HOOKS_DIR}/git-hooks.log"
TMP_PATCH_FILE="${HOOKS_DIR}/pre-commit.patch"

################################################################################

log()
{
    timestamp="$(date +%Y-%m-%d_%H:%M)"
    echo "${timestamp} [$(basename ${0})]: $*" >> "$HOOKS_LOG_FILE"
}

########################################

abort()
{
    log ">>> ERROR running pre-commit: $*"
    echo ">>> ERROR running pre-commit: $*"
    exit 1
}

########################################

docker_exec()
{
    docker compose run --rm -T --no-deps app "$@" 2>/dev/null \
        || abort "$* failed"
}

########################################

rebase_guard()
{
    get_staged_files

    "${HOOKS_DIR}/rebase_guard.sh" \
        || exit 0
}

################################################################################

save_unstaged_changes()
{
    if [ 0 -eq "$(git diff --name-only | wc -l)" ]
    then
        return 0
    else
        git diff --patch --no-color > "${TMP_PATCH_FILE}"
        log "> diff found, created patch-file"

        test -f "${TMP_PATCH_FILE}" \
            && git restore "${WORKDIR}"

        log "> restored workdir:"
        log "$(git status)"
    fi
}

################################################################################

get_staged_files()
{
    if [ -z "${STAGED_FILES}" ]
    then
        STAGED_FILES="$(git --no-pager diff --name-only --diff-filter=d --cached)"
    fi

    log "======================= pre-commit ========================="
    log "> with staged files: ${STAGED_FILES}"
    echo "${STAGED_FILES}"
}

########################################

build_grep_pattern()
{
    echo "${@}" | sed 's/ /\\\|/g'
}

########################################

get_files()
{
    local file_extensions=(
    "js"
    "ts"
    "svelte"
    "md"
    "json"
    "yaml"
    )

    local pattern
    pattern=$(build_grep_pattern "${file_extensions[@]}")
    pattern="\.\($pattern\)\$"

    get_staged_files \
        | grep --basic-regexp "$pattern"
}

########################################

run_fix()
{
    STAGED_FILES="$(get_files)"

    if [ -n "${STAGED_FILES}" ]
    then
        docker_exec pnpm \
            run lint:base \
            --no-error-on-unmatched-pattern \
            --fix ${STAGED_FILES} \
            || abort "eslint failed"
    fi
}

########################################

run_format()
{
    STAGED_FILES="$(get_files)"

    if [ -n "${STAGED_FILES}" ]
    then
        docker_exec pnpm \
            run prettier:base \
            --write ${STAGED_FILES} \
            || abort "format failed"
    fi
}

################################################################################

main()
{
    rebase_guard
    save_unstaged_changes

    run_fix
    run_format

    git add --update
}

############################################################

main
